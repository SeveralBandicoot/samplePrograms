â€¢ int partition(int arr[], int start, int end)
{
// The pivot element is taken to be the element at
// the start of the subrange to be partitioned
int pivotValue = arr[start];
int pivotPosition = start;
// Rearrange the rest of the array elements to
// partition the subrange from start to end
for (int pos = start + 1; pos <= end; pos++)
{
if (arr[pos] < pivotValue)
{
// arr[scan] is the "current" item.
// Swap the current item with the item to the
// right of the pivot element
swap(arr[pivotPosition + 1], arr[pos]);
// Swap the current item with the pivot element
swap(arr[pivotPosition], arr[pivotPosition + 1]);
// Adjust the pivot position so it stays with the
// pivot element
pivotPosition++;
}
}
return pivotPosition;
}